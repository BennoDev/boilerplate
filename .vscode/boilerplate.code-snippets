{
    // Place your workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "NestJS Injectable": {
        "prefix": "nest-i",
        "body": [
            "import { Injectable } from '@nestjs/common';\n",
            "import { Logger } from '@libs/logger';\n",
            "@Injectable()",
            "export class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} {",
            "\tconstructor(",
            "\t\tprivate readonly logger: Logger,",
            "\t\t${2: /* DEPENDENCIES */}",
            "\t) {",
            "\t\tthis.logger.setContext($1.name);",
            "\t}",
            "}\n",
        ],
    },
    "NestJS Module": {
        "prefix": "nest-m",
        "body": [
            "import { Module } from '@nestjs/common';\n",
            "@Module({${2: /* MODULE CONFIGURATION */}})",
            "export class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} {",
            "}\n",
        ],
    },
    "NestJS Config": {
        "prefix": "nest-c",
        "body": [
            "import { registerAs } from '@nestjs/config';\n",
            "export type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} = {",
            "\t${2:/* CONFIG PROPERTIES */}",
            "}\n",
            "export const ${1/(.)/${1:/downcase}/} = registerAs<${1}>('${1/(.)(.*?)Config/${1:/downcase}${2}/}', () => ({",
            "\t${4: /* CONFIG GETTERS */}",
            "}));\n",
        ],
    },
    "Mikro ORM Entity": {
        "prefix": "mikro-e",
        "body": [
            "import { Entity, EntityRepositoryType, OptionalProps, Property } from '@mikro-orm/core';\n",
            "import { BaseEntity, type BaseEntityOptionalProps } from '@libs/database';\n",
            "import { ${1}Repository } from '../repositories';\n",
            "@Entity({ customRepository: () => ${1}Repository })",
            "export class ${1:${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}} extends BaseEntity<${1}> {",
            "\t[OptionalProps]?: BaseEntityOptionalProps;\n",
            "\t[EntityRepositoryType]?: ${1}Repository;",
            "}\n",
        ],
    },
    "Mikro ORM Repository": {
        "prefix": "mikro-r",
        "body": [
            "import { EntityRepository } from '@mikro-orm/postgresql';\n",
            "// Using an import type statement here to avoid circular import statements in runtime",
            "import type { ${1:${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}} } from '../entities';\n",
            "export class ${1}Repository extends EntityRepository<${1}>{",
            "}",
        ],
    },
    "Unit Test": {
        "prefix": "u-test",
        "body": [
            "import { ${1:${TM_FILENAME_BASE/([^.]*.[^.]*).*/${1:/pascalcase}/}} } from './${TM_FILENAME_BASE/([^.]*.[^.]*).*/${1:/downcase}/}';\n",
            "describe('$1', () => {",
            "\tconst ${2:unit} = new $1();\n",
            "\tdescribe('${3:method being tested}', () => {",
            "\t\tit('${4:test description}', async () => {});",
            "\t});",
            "});\n",
        ],
    },
    "Constructor": {
        "prefix": "ctor",
        "body": ["constructor($1) {}"],
    },
    "Import": {
        "prefix": "imp",
        "body": ["import { $2 } from '$1';"],
    },
}
